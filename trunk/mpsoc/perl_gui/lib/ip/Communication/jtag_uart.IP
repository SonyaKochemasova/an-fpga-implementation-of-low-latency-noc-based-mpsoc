#######################################################################
##	File: jtag_uart.IP
##    
##	Copyright (C) 2014-2016  Alireza Monemi
##    
##	This file is part of ProNoC 1.8.0 
##
## 	WARNING: THIS IS AN AUTO-GENERATED FILE. CHANGES TO IT 
##	MAY CAUSE UNEXPECTED BEHAIVOR.
################################################################################

$ipgen = bless( {
                  'plugs' => {
                               'reset' => {
                                            'value' => 1,
                                            '0' => {
                                                     'name' => 'reset'
                                                   },
                                            'type' => 'num'
                                          },
                               'interrupt_peripheral' => {
                                                           '0' => {
                                                                    'name' => 'interrupt_peripheral'
                                                                  },
                                                           'type' => 'num',
                                                           'value' => 1
                                                         },
                               'wb_slave' => {
                                               'value' => 1,
                                               '0' => {
                                                        'name' => 'wb_slave',
                                                        'width' => 5,
                                                        'addr' => '0x9000_0000	0x90ff_ffff		UART16550 Controller'
                                                      },
                                               'type' => 'num'
                                             },
                               'clk' => {
                                          'value' => 1,
                                          'type' => 'num',
                                          '0' => {
                                                   'name' => 'clk'
                                                 }
                                        }
                             },
                  'hdl_files' => [
                                   '/mpsoc/src_peripheral/jtag/jtag_uart/altera_jtag_uart_wb.v',
                                   '/mpsoc/src_peripheral/jtag/jtag_uart/jtag_uart_wb.v',
                                   '/mpsoc/src_peripheral/jtag/jtag_uart/altera_simulator_UART.v'
                                 ],
                  'gui_status' => {
                                    'timeout' => 0,
                                    'status' => 'ideal'
                                  },
                  'parameters_order' => [
                                          'FPGA_VENDOR',
                                          'SIM_BUFFER_SIZE',
                                          'SIM_WAIT_COUNT'
                                        ],
                  'description' => 'The Altera JTAG UART core with Wishbone bus interface.',
                  'system_h' => '#include "define_printf.h" // This file must be available in processor folder which define the printf function

#define ${IP}_DATA_REG					(*((volatile unsigned int *) ($BASE)))
#define ${IP}_CONTROL_REG				(*((volatile unsigned int *) ($BASE+4)))
#define ${IP}_CONTROL_WSPACE_MSK	0xFFFF0000
#define ${IP}_DATA_RVALID_MSK			0x00008000
#define ${IP}_DATA_DATA_MSK			0x000000FF

//////////////////////////////*basic function for jtag_uart*////////////////////////////////////////
void jtag_putchar(char ch);
char jtag_getchar(void);
void outbyte(char c){jtag_putchar(c);} //called in printf();
char inbyte(){return jtag_getchar();}

void jtag_putchar(char ch){ //print one char from jtag_uart
	while((${IP}_CONTROL_REG&${IP}_CONTROL_WSPACE_MSK)==0);
	${IP}_DATA_REG=ch;
}

char jtag_getchar(void){ //get one char from jtag_uart
	unsigned int data;
	data=${IP}_DATA_REG;
	while(!(data & ${IP}_DATA_RVALID_MSK)) //wait for terminal input
		data=${IP}_DATA_REG;
	return (data & ${IP}_DATA_DATA_MSK);
}	

int jtag_scanstr(char* buf){ //scan string until <ENTER> to buf, return str length 
	char ch; unsigned int i=0;
	while(1){
		ch=jtag_getchar();
		if(ch==\'\\n\') { buf[i]=0; jtag_putchar(ch); i++; break; } //ENTER
		else if(ch==127) { printf("\\b \\b"); if(i>0) i--; } //backspace
		else { jtag_putchar(ch); buf[i]=ch; i++; } //valid
	}
	return i;
}

int jtag_scanint(int *num){ //return the scanned integer
	unsigned int curr_num,strlen,i=0;
	char str[11];
	strlen=jtag_scanstr(str); //scan str
	if(strlen>11) { printf("overflows 32-bit integer value\\n");return 1; } //check overflow
	*num=0;
	for(i=0;i<strlen;i++){ //str2int
		curr_num=(unsigned int)str[i]-\'0\';
		if(curr_num>9); //not integer: do nothing
		else *num=*num*10+curr_num;  //is integer
	}
	return 0;
}



/////////////////////////////*END: basic function for jtag_uart*////////////////////////////////////',
                  'unused' => {
                                'plug:wb_slave[0]' => [
                                                        'rty_o',
                                                        'bte_i',
                                                        'err_o',
                                                        'tag_i'
                                                      ]
                              },
                  'version' => 14,
                  'parameters' => {
                                    'SIM_WAIT_COUNT' => {
                                                          'global_param' => 'Localparam',
                                                          'type' => 'Spin-button',
                                                          'redefine_param' => 1,
                                                          'content' => '2,100000,1',
                                                          'default' => '1000',
                                                          'info' => 'This parameter is valid only in simulation. 
If internal buffer has a data, the internal timer incremented by one in each clock cycle. If the timer reaches the WAIT_COUNT value, it writes the buffer value on the simulator terminal.'
                                                        },
                                    'SIM_BUFFER_SIZE' => {
                                                           'global_param' => 'Localparam',
                                                           'type' => 'Spin-button',
                                                           'redefine_param' => 1,
                                                           'content' => '10,10000,1',
                                                           'info' => 'Internal buffer size. 
This parameter is valid only in simulation. 
If internal buffer overflows, the buffer content are displayed on simulator terminal.',
                                                           'default' => '100'
                                                         },
                                    'FPGA_VENDOR' => {
                                                       'default' => ' "ALTERA"',
                                                       'info' => 'FPGA VENDOR name. Only Altera FPGA is supported. Currently the Generic serial port is not supported. ',
                                                       'content' => ' "ALTERA"',
                                                       'redefine_param' => 1,
                                                       'type' => 'Combo-box',
                                                       'global_param' => 'Localparam'
                                                     }
                                  },
                  'ports_order' => [
                                     'reset',
                                     'clk',
                                     'irq',
                                     's_dat_i',
                                     's_sel_i',
                                     's_addr_i',
                                     's_cti_i',
                                     's_stb_i',
                                     's_cyc_i',
                                     's_we_i',
                                     's_dat_o',
                                     's_ack_o',
                                     'RxD_din_sim',
                                     'RxD_wr_sim',
                                     'RxD_ready_sim'
                                   ],
                  'file_name' => '/home/alireza/mywork/mpsoc/src_peripheral/jtag/jtag_uart/jtag_uart_wb.v',
                  'category' => 'Communication',
                  'module_name' => 'jtag_uart_wb',
                  'modules' => {
                                 'jtag_uart_wb' => {}
                               },
                  'ip_name' => 'jtag_uart',
                  'ports' => {
                               's_dat_i' => {
                                              'range' => '31       :   0',
                                              'intfc_port' => 'dat_i',
                                              'intfc_name' => 'plug:wb_slave[0]',
                                              'type' => 'input'
                                            },
                               'RxD_din_sim' => {
                                                  'type' => 'input',
                                                  'range' => '7:0 ',
                                                  'intfc_port' => 'RxD_din_sim',
                                                  'intfc_name' => 'socket:RxD_sim[0]'
                                                },
                               's_stb_i' => {
                                              'type' => 'input',
                                              'range' => '',
                                              'intfc_port' => 'stb_i',
                                              'intfc_name' => 'plug:wb_slave[0]'
                                            },
                               's_addr_i' => {
                                               'type' => 'input',
                                               'intfc_name' => 'plug:wb_slave[0]',
                                               'range' => '',
                                               'intfc_port' => 'adr_i'
                                             },
                               's_cti_i' => {
                                              'type' => 'input',
                                              'range' => '2    :   0',
                                              'intfc_port' => 'cti_i',
                                              'intfc_name' => 'plug:wb_slave[0]'
                                            },
                               'irq' => {
                                          'type' => 'output',
                                          'intfc_name' => 'plug:interrupt_peripheral[0]',
                                          'intfc_port' => 'int_o',
                                          'range' => ''
                                        },
                               'RxD_ready_sim' => {
                                                    'type' => 'output',
                                                    'intfc_name' => 'socket:RxD_sim[0]',
                                                    'intfc_port' => 'RxD_ready_sim',
                                                    'range' => ''
                                                  },
                               's_cyc_i' => {
                                              'intfc_name' => 'plug:wb_slave[0]',
                                              'range' => '',
                                              'intfc_port' => 'cyc_i',
                                              'type' => 'input'
                                            },
                               's_dat_o' => {
                                              'type' => 'output',
                                              'range' => '31      :   0',
                                              'intfc_port' => 'dat_o',
                                              'intfc_name' => 'plug:wb_slave[0]'
                                            },
                               'clk' => {
                                          'intfc_name' => 'plug:clk[0]',
                                          'range' => '',
                                          'intfc_port' => 'clk_i',
                                          'type' => 'input'
                                        },
                               'RxD_wr_sim' => {
                                                 'type' => 'input',
                                                 'intfc_port' => 'RxD_wr_sim',
                                                 'range' => '',
                                                 'intfc_name' => 'socket:RxD_sim[0]'
                                               },
                               's_ack_o' => {
                                              'type' => 'output',
                                              'range' => '',
                                              'intfc_port' => 'ack_o',
                                              'intfc_name' => 'plug:wb_slave[0]'
                                            },
                               's_sel_i' => {
                                              'range' => '3    :   0',
                                              'intfc_port' => 'sel_i',
                                              'intfc_name' => 'plug:wb_slave[0]',
                                              'type' => 'input'
                                            },
                               's_we_i' => {
                                             'type' => 'input',
                                             'range' => '',
                                             'intfc_port' => 'we_i',
                                             'intfc_name' => 'plug:wb_slave[0]'
                                           },
                               'reset' => {
                                            'intfc_name' => 'plug:reset[0]',
                                            'intfc_port' => 'reset_i',
                                            'range' => '',
                                            'type' => 'input'
                                          }
                             },
                  'sockets' => {
                                 'RxD_sim' => {
                                                '0' => {
                                                         'name' => 'RxD_sim'
                                                       },
                                                'type' => 'num',
                                                'value' => 1,
                                                'connection_num' => 'single connection'
                                              }
                               }
                }, 'ip_gen' );
